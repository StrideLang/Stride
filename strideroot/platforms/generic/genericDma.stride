

genericOption GENERIC_DMA_INCREMENT_MODE {
    name: "Increment mode"
    values: ["disabled", "enabled"]
    meta: "If the incremented mode is enabled (PINC or MINC set to 1), the address of the next 
transfer is the address of the previous one incremented by 1, 2 or 4, depending on the data 
size defined in PSIZE[1:0] or MSIZE[1:0]. The first transfer address is the one programmed 
in the DMA_CPARx or DMA_CMARx register. During transfers, these registers keep the 
initially programmed value. The current transfer addresses (in the current internal 
peripheral/memory address register) are not accessible by software."
}

genericOption GENERIC_DMA_INCREMENT_SIZE {
    name: "Increment size"
    values: ["1 (byte)", "2 (half-word)", "4 (word)"]

    heuristics: [enableIfEquals GENERIC_DMA_INCREMENT_MODE { siblingId: GENERIC_DMA_INCREMENT_MODE optionIndex: 1}]
    meta: "If the incremented mode is enabled (PINC or MINC set to 1), the address of the next 
transfer is the address of the previous one incremented by 1, 2 or 4, depending on the data 
size defined in PSIZE[1:0] or MSIZE[1:0]. The first transfer address is the one programmed 
in the DMA_CPARx or DMA_CMARx register. During transfers, these registers keep the 
initially programmed value. The current transfer addresses (in the current internal 
peripheral/memory address register) are not accessible by software."
}

genericOption GENERIC_DMA_NON_CIRCULAR_MODE {
    name: "Non-circular mode"
    values: ["disabled", "enabled"]
    meta: "If the channel x is configured in non-circular mode, no DMA request is served after the last 
data transfer (once the number of single data to transfer reaches zero). The DMA channel 
must be disabled in order to reload a new number of data items into the DMA_CNDTRx 
register.
In circular mode, after the last data transfer, the DMA_CNDTRx register is automatically 
reloaded with the initially programmed value. The current internal address registers are 
reloaded with the base address values from the DMA_CPARx and DMA_CMARx registers.
"
}


genericPeripheral GENERIC_DMA {
    name: "DMA"
    parameters: [GENERIC_DMA_INCREMENT_MODE, GENERIC_DMA_INCREMENT_SIZE, GENERIC_DMA_NON_CIRCULAR_MODE]
    meta: "DMA"
}

procedure InitDMAChannel {
    peripheralType:  ST_DMA_TYPE
    actions: [ 
        action SetPeripheralRegisterAddress {
            # DMA_CPARx register
            sequence: []
            meta: "The data is moved from/to this address to/from the memory after the peripheral event,
or after the channel is enabled in memory-to-memory mode."
        }, 
        action SetMemoryAddress {
            # DMA_CMARx register
            sequence: []
            meta: "The data is written to/read from the memory after the peripheral event or after the
channel is enabled in memory-to-memory mode."
        }, 
        action SetTransferSize {
            # DMA_CMARx register
            sequence: []
            meta: "Configure the total number of data to transfer in the DMA_CNDTRx register.
After each data transfer, this value is decremented."
        }, 
        action SetTransferSize {
            # DMA_CMARx register
            sequence: []
            meta: "Configure the total number of data to transfer in the DMA_CNDTRx register.
After each data transfer, this value is decremented."
        }, 
        
        action InitializeGPIOPins {
            sequence: [
                setRegister SET_GPIO_PINS {
                    # TODO a few registers for example. Not yet accurate
                    registers: [ST_GPIO_MODER_A, ST_GPIO_OTYPER, ST_GPIO_PUPDR, ST_GPIO_ODR, ST_GPIO_IDR]
                    optional: off
                    requires: EnableClock
                }
            ]
        }
    ]
}

